{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"getting-started/","title":"Getting started","text":""},{"location":"reference/","title":"Reference","text":""},{"location":"reference/pkg/cloudflare/","title":"cloudflare","text":"<pre><code>import \"github.com/iolave/go-proxmox/pkg/cloudflare\"\n</code></pre>"},{"location":"reference/pkg/cloudflare/#type-cloudflareservicetoken","title":"type CloudflareServiceToken","text":"<pre><code>type CloudflareServiceToken struct {\n    ClientId     string\n    ClientSecret string\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/","title":"proxmoxapi","text":"<pre><code>import \"github.com/iolave/go-proxmox/pkg/proxmox_api\"\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#constants","title":"Constants","text":"<pre><code>const (\n    CREDENTIALS_NOT_DETECTED_ERROR  = \"credentials could not be detected from env\"\n    CREDENTIALS_NOT_SUPPORTED_ERROR = \"credentials type not supported yet\"\n)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-firewalllogentry","title":"type FirewallLogEntry","text":"<pre><code>type FirewallLogEntry struct {\n    Id   int    `json:\"n\"`\n    Text string `json:\"t\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-firewallloglevel","title":"type FirewallLogLevel","text":"<pre><code>type FirewallLogLevel string\n</code></pre> <pre><code>const (\n    FIREWALL_LOG_LEVEL_EMERG  FirewallLogLevel = \"emerg\"\n    FIREWALL_LOG_LEVEL_ALERT  FirewallLogLevel = \"alert\"\n    FIREWALL_LOG_LEVEL_CRIT   FirewallLogLevel = \"crit\"\n    FIREWALL_LOG_LEVEL_ERR    FirewallLogLevel = \"err\"\n    FIREWALL_LOG_LEVEL_WARN   FirewallLogLevel = \"warning\"\n    FIREWALL_LOG_LEVEL_NOTICE FirewallLogLevel = \"notice\"\n    FIREWALL_LOG_LEVEL_INFO   FirewallLogLevel = \"info\"\n    FIREWALL_LOG_LEVEL_DEBUG  FirewallLogLevel = \"debug\"\n    FIREWALL_LOG_LEVEL_NOLOG  FirewallLogLevel = \"nolog\"\n)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-getaliasresponse","title":"type GetAliasResponse","text":"<pre><code>type GetAliasResponse struct {\n    CIDR    string `json:\"cidr\"`\n    Digest  string `json:\"digest\"`\n    Name    string `json:\"name\"`\n    Comment string `json:\"comment\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-getipsetresponse","title":"type GetIPSetResponse","text":"<pre><code>type GetIPSetResponse struct {\n    Digest  string `json:\"digest\"`\n    Name    string `json:\"name\"`\n    Comment string `json:\"comment\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-getnodefirewallrulesresponse","title":"type GetNodeFirewallRulesResponse","text":"<pre><code>type GetNodeFirewallRulesResponse[Position interface{ int | string }] struct {\n    Action          string           `json:\"action\"`\n    Comment         string           `json:\"comment\"`\n    Destination     string           `json:\"dest\"`\n    DestinationPort string           `json:\"dport\"`\n    Enable          int              `json:\"enable\"`\n    ICMPType        string           `json:\"icmp-type\"`\n    Interface       string           `json:\"iface\"`\n    IPVersion       int              `json:\"ipversion\"`\n    LogLevel        FirewallLogLevel `json:\"log\"`\n    Macro           string           `json:\"macro\"`\n    Pos             Position         `json:\"pos\"`\n    Proto           string           `json:\"proto\"`\n    Source          string           `json:\"source\"`\n    Sport           string           `json:\"sport\"`\n    Type            string           `json:\"type\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-getnodesresponse","title":"type GetNodesResponse","text":"<pre><code>type GetNodesResponse struct {\n    Node           string     `json:\"node\"`\n    Status         NodeStatus `json:\"status\"`\n    CPU            float64    `json:\"cpu\"`\n    Level          string     `json:\"level\"`\n    MaxCpu         int        `json:\"maxcpu\"`\n    MaxMem         int        `json:\"maxmem\"`\n    Mem            int        `json:\"mem\"`\n    SSLFingerprint string     `json:\"ssl_fingerprint\"`\n    Uptime         int        `json:\"uptime\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-getrulesresponse","title":"type GetRulesResponse","text":"<pre><code>type GetRulesResponse struct {\n    Pos int `json:\"pos\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-getversionresponse","title":"type GetVersionResponse","text":"<pre><code>type GetVersionResponse struct {\n    Release string `json:\"release\"`\n    Version string `json:\"version\"`\n    RepoID  string `json:\"repoid\"`\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-nodestatus","title":"type NodeStatus","text":"<pre><code>type NodeStatus string\n</code></pre> <pre><code>const (\n    NODE_STATUS_ONLINE  NodeStatus = \"online\"\n    NODE_STATUS_OFFLINE NodeStatus = \"offline\"\n    NODE_STATUS_UNKNOWN NodeStatus = \"unknown\"\n)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-proxmoxapi","title":"type ProxmoxAPI","text":"<pre><code>type ProxmoxAPI struct {\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-new","title":"func New","text":"<pre><code>func New(config ProxmoxAPIConfig) (*ProxmoxAPI, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-newwithcredentials","title":"func NewWithCredentials","text":"<pre><code>func NewWithCredentials(config ProxmoxAPIConfig, creds *credentials) (*ProxmoxAPI, error)\n</code></pre> <p>TODO: To test credentials, do a proxmox version query to ensure credentials are valid</p> <p></p>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-createclusterfirewallalias","title":"func (*ProxmoxAPI) CreateClusterFirewallAlias","text":"<pre><code>func (api *ProxmoxAPI) CreateClusterFirewallAlias(name, cidr string, comment *string) error\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-deleteclusterfirewallalias","title":"func (*ProxmoxAPI) DeleteClusterFirewallAlias","text":"<pre><code>func (api *ProxmoxAPI) DeleteClusterFirewallAlias(name string, digest *string) error\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getclusterfirewallalias","title":"func (*ProxmoxAPI) GetClusterFirewallAlias","text":"<pre><code>func (api *ProxmoxAPI) GetClusterFirewallAlias(name string) (GetAliasResponse, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getclusterfirewallaliases","title":"func (*ProxmoxAPI) GetClusterFirewallAliases","text":"<pre><code>func (api *ProxmoxAPI) GetClusterFirewallAliases() ([]GetAliasResponse, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getclusterfirewallipset","title":"func (*ProxmoxAPI) GetClusterFirewallIPSet","text":"<pre><code>func (api *ProxmoxAPI) GetClusterFirewallIPSet() ([]GetIPSetResponse, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getclusterfirewallrules","title":"func (*ProxmoxAPI) GetClusterFirewallRules","text":"<pre><code>func (api *ProxmoxAPI) GetClusterFirewallRules() ([]GetRulesResponse, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getnodefirewallrules","title":"func (*ProxmoxAPI) GetNodeFirewallRules","text":"<pre><code>func (api *ProxmoxAPI) GetNodeFirewallRules(node string) ([]GetNodeFirewallRulesResponse[int], error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getnodefirewallrulesbypos","title":"func (*ProxmoxAPI) GetNodeFirewallRulesByPos","text":"<pre><code>func (api *ProxmoxAPI) GetNodeFirewallRulesByPos(node string, pos int) (GetNodeFirewallRulesResponse[string], error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getnodes","title":"func (*ProxmoxAPI) GetNodes","text":"<pre><code>func (api *ProxmoxAPI) GetNodes() ([]GetNodesResponse, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-getversion","title":"func (*ProxmoxAPI) GetVersion","text":"<pre><code>func (api *ProxmoxAPI) GetVersion() (GetVersionResponse, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#func-proxmoxapi-readnodefirewalllog","title":"func (*ProxmoxAPI) ReadNodeFirewallLog","text":"<pre><code>func (api *ProxmoxAPI) ReadNodeFirewallLog(node string) ([]FirewallLogEntry, error)\n</code></pre>"},{"location":"reference/pkg/proxmox_api/#type-proxmoxapiconfig","title":"type ProxmoxAPIConfig","text":"<pre><code>type ProxmoxAPIConfig struct {\n    Host               string\n    Port               int\n    InsecureSkipVerify bool\n    CfServiceToken     *cloudflare.CloudflareServiceToken\n}\n</code></pre>"}]}